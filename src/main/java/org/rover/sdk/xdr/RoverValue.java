// Automatically generated by xdrgen 
// DO NOT EDIT or your changes may be overwritten

package org.rover.sdk.xdr;


import java.io.IOException;

// === xdr source ============================================================

//  struct RoverValue
//  {
//      Hash txSetHash;   // transaction set to apply to previous ledger
//      uint64 closeTime; // network close time
//  
//      // upgrades to apply to the previous ledger (usually empty)
//      // this is a vector of encoded 'LedgerUpgrade' so that nodes can drop
//      // unknown steps during consensus if needed.
//      // see notes below on 'LedgerUpgrade' for more detail
//      // max size is dictated by number of upgrade types (+ room for future)
//      UpgradeType upgrades<6>;
//  
//      // reserved for future use
//      union switch (int v)
//      {
//      case 0:
//          void;
//      }
//      ext;
//  };

//  ===========================================================================
public class RoverValue  {
  public RoverValue () {}
  private Hash txSetHash;
  public Hash getTxSetHash() {
    return this.txSetHash;
  }
  public void setTxSetHash(Hash value) {
    this.txSetHash = value;
  }
  private Uint64 closeTime;
  public Uint64 getCloseTime() {
    return this.closeTime;
  }
  public void setCloseTime(Uint64 value) {
    this.closeTime = value;
  }
  private UpgradeType[] upgrades;
  public UpgradeType[] getUpgrades() {
    return this.upgrades;
  }
  public void setUpgrades(UpgradeType[] value) {
    this.upgrades = value;
  }
  private RoverValueExt ext;
  public RoverValueExt getExt() {
    return this.ext;
  }
  public void setExt(RoverValueExt value) {
    this.ext = value;
  }
  public static void encode(XdrDataOutputStream stream, RoverValue encodedRoverValue) throws IOException{
    Hash.encode(stream, encodedRoverValue.txSetHash);
    Uint64.encode(stream, encodedRoverValue.closeTime);
    int upgradessize = encodedRoverValue.getUpgrades().length;
    stream.writeInt(upgradessize);
    for (int i = 0; i < upgradessize; i++) {
      UpgradeType.encode(stream, encodedRoverValue.upgrades[i]);
    }
    RoverValueExt.encode(stream, encodedRoverValue.ext);
  }
  public static RoverValue decode(XdrDataInputStream stream) throws IOException {
    RoverValue decodedRoverValue = new RoverValue();
    decodedRoverValue.txSetHash = Hash.decode(stream);
    decodedRoverValue.closeTime = Uint64.decode(stream);
    int upgradessize = stream.readInt();
    decodedRoverValue.upgrades = new UpgradeType[upgradessize];
    for (int i = 0; i < upgradessize; i++) {
      decodedRoverValue.upgrades[i] = UpgradeType.decode(stream);
    }
    decodedRoverValue.ext = RoverValueExt.decode(stream);
    return decodedRoverValue;
  }

  public static class RoverValueExt {
    public RoverValueExt () {}
    Integer v;
    public Integer getDiscriminant() {
      return this.v;
    }
    public void setDiscriminant(Integer value) {
      this.v = value;
    }
    public static void encode(XdrDataOutputStream stream, RoverValueExt encodedRoverValueExt) throws IOException {
    stream.writeInt(encodedRoverValueExt.getDiscriminant().intValue());
    switch (encodedRoverValueExt.getDiscriminant()) {
    case 0:
    break;
    }
    }
    public static RoverValueExt decode(XdrDataInputStream stream) throws IOException {
    RoverValueExt decodedRoverValueExt = new RoverValueExt();
    Integer discriminant = stream.readInt();
    decodedRoverValueExt.setDiscriminant(discriminant);
    switch (decodedRoverValueExt.getDiscriminant()) {
    case 0:
    break;
    }
      return decodedRoverValueExt;
    }

  }
}
